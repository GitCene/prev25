	// typeEquiv : represents the structural equivalence of types relation
	// in typeEquiv.equ
	private static class typeEquiv {
		
		// EQU:5
		private static boolean equ(TYP.StrType strType1, TYP.StrType strType2) {
			Iterator<TYP.Type> iter1 = strType1.compTypes.iterator();
			Iterator<TYP.Type> iter2 = strType2.compTypes.iterator();
			while (iter1.hasNext() && iter2.hasNext()) {
				if (!equ(iter1.next(), iter2.next())) return false;
			}
			return !(iter1.hasNext() || iter2.hasNext());
		}

		// EQU:6
		private static boolean equ(TYP.UniType uniType1, TYP.UniType uniType2) {
			Iterator<TYP.Type> iter1 = uniType1.compTypes.iterator();
			Iterator<TYP.Type> iter2 = uniType2.compTypes.iterator();
			while (iter1.hasNext() && iter2.hasNext()) {
				if (!equ(iter1.next(), iter2.next())) return false;
			}
			return !(iter1.hasNext() || iter2.hasNext());
		}

		// EQU:7
		private static boolean equ(TYP.FunType funType1, TYP.FunType funType2) {
			if (!equ(funType1.resType, funType2.resType)) return false;
			Iterator<TYP.Type> iter1 = funType1.parTypes.iterator();
			Iterator<TYP.Type> iter2 = funType2.parTypes.iterator();
			while (iter1.hasNext() && iter2.hasNext()) {
				if (!equ(iter1.next(), iter2.next())) return false;
			}
			return !(iter1.hasNext() || iter2.hasNext());
		}

		// EQU:1 last. this should work because the classes are static, right?
		private static boolean equ(TYP.NameType typ1, TYP.Type typ2) {
			return typ1 == typ2;
		}
	}